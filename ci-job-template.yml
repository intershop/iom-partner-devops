###############################################################################
# Parameters have to be specified by the caller, to customize the pipeline
# for a certain project
################################################################################
parameters:

  # Has to be set, if ci-job-template.yml is used in a loop, for two reasons:
  # - to make each job-name unique,
  # - to extend names of files, which are published in extensions.
  # For this reason id must consitst of characters, numbers and _ only.
- name: id
  type: string
  default: ''
  
  # Enables an easy integration with custom jobs. The parameter will be passed
  # as is to the 'dependsOn' property of the job.
- name: dependsOn
  type: string
  default: ''

  # Enables an easy integration with custom jobs. The parameter will be passed
  # as is to the 'condition' property of the job.
- name: condition
  type: string
  default: ''

  # Every partner has it's own agent-pool, therefore the name of the pool cannot
  # be hardcoded in the pipeline template.
- name: agentPool
  type: string
  default: ''

  # Has to be set, if the project is placed in a subdirectory.
- name: projectDir
  type: string
  default: ''

  # Has to be set, if the project is located in a remote repository.
- name: repository
  type: string
  default: self

  # If set to true, tag of SNAPSHOT images will be extended with the commit hash.
- name: uniqueSnapshotTag
  type: boolean
  default: true

  # Name of template to be executed before all major steps of current job.
- name: preHookTemplate
  type: string
  default: ''
  
  # Name of template to be executed after all major steps of current job.
- name: postHookTemplate
  type: string
  default: ''
  
  # Service connection to the Docker repository, containing the IOM product
  # images.
- name: dockerRepoIOMServiceConnection
  type: string
  default: ''

  # Name of Docker repository, containing the IOM product images.
  # Overwrites the property intershop.docker.repo of IOM project.
- name: dockerRepoIOM
  type: string
  default: ''

  # Service connection to the ACR of the project.
- name: acrServiceConnection
  type: string
  default: ''

  # Repository in ACR including host name.
- name: acr
  type: string
  default: ''

  # Name of project environment, that will be used for CI installation.
- name: projectEnvName
  type: string
  default: ci
  
  # Name of projects Maven repository.
- name: artifactsFeed
  type: string
  default: ''

  # Regular expression to check branch name of the IOM project.
  # Only if the regex is matching, the successfully tested Docker images will be provided in ACR.
- name: branchesForPublication
  type: string
  default: '^refs/heads/develop$\|^refs/heads/master$\|^refs/heads/main$\|^refs/heads/release/\|^refs/heads/hotfix/'

jobs:
- job: CI${{ parameters.id }}
  pool: '${{ parameters.agentPool }}'
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}
  continueOnError: false
  timeoutInMinutes: 300
  workspace:
    clean: all
  variables:
    
    #---------------------------------------------------------------------------
    # Variables, to control the behaviour of the pipeline.
    #---------------------------------------------------------------------------

    # Version of Helm.
    #HELM_VERSION: 3.8.2
    HELM_VERSION: 3.14.0
    
    # IOM Helm Charts.
    # TODO: use latest version
    IOM_HELM_VERSION: 3.0.0
    IOM_HELM_URL: https://intershop.github.io/helm-charts
    
    DBACCOUNT_IMAGE_NAME: iom-dbaccount
    DBACCOUNT_IMAGE_TAG: 2.0.0
    
    UBUNTU_MIRROR: http://azure.archive.ubuntu.com/ubuntu/
    
    #---------------------------------------------------------------------------
    # Constants
    #---------------------------------------------------------------------------
    
    # Local maven repository has to be created in workspace.
    M2_LOCAL_REPO: local-maven-repo
    # Std env. variable, that is automatically used by mvn.
    MAVEN_OPTS: "-Dmaven.repo.local=$(Pipeline.Workspace)/$(M2_LOCAL_REPO)"
    
    # MINIKUBE_HOME is defining where minikube stores its data .
    MINIKUBE_HOME: $(Pipeline.Workspace)/minikube
    
    # Directory, where to checkout project.
    PROJECT_PATH: project

    # Directory for log files.
    LOG_DIR: logs
    
    # Helm release, installed by this pipeline.
    IOM_HELM_RELEASE: ci

    # Kubernetes namespace, used by this pipeline.
    IOM_KUBERNETES_NAMESPACE: iom

    # Number of IOM application servers.
    REPLICA_COUNT: 2

    # Timeout for import of test-data.
    IMPORT_TESTDATA_TIMEOUT: 300

    #---------------------------------------------------------------------------
    # Runtime variables to control the CI process.
    #---------------------------------------------------------------------------

    # Publishing artifacts is only allowed by branches, that are matching <branchesForPublication>.
    IS_PRIVATE_BRANCH:   true
    IOM_VERSION:         ""
    IOM_MINOR_VERSION:   ""
    JDK_MAJOR_VERSION:   ""
    PROJECT_VERSION:     ""
    PROJECT_COMMIT:      ""
    M2_REPO_CACHE_HIT:   ""
    MINIKUBE_CACHE_HIT:  ""
    INGRESS_IP:          ""
    POSTGRES_IP:         ""
    IS_RELEASE_BUILD:    false

  steps:

  ############################################################################
  # Prepare CI environment.
  ############################################################################

  - script: |
      set -e
      
      if [ -z "${{ parameters.dockerRepoIOMServiceConnection }}" ]; then
        echo "##[error] Parameter dockerRepoIOMServiceConnection must not be empty!"
        exit 1
      fi
      if [ -z "${{ parameters.dockerRepoIOM }}" ]; then
        echo "##[error] Parameter dockerRepoIOM must not be empty!"
        exit 1
      fi
      if [ -z "${{ parameters.acrServiceConnection }}" ]; then
        echo "##[error] Parameter acrServiceConnection must not be empty!"
        exit 1
      fi
      if [ -z "${{ parameters.acr }}" ]; then
        echo "##[error] Parameter acr must not be empty!"
        exit 1
      fi
      if [ -z "${{ parameters.artifactsFeed }}" ]; then
        echo "##[error] Parameter artifactsFeed must not be empty!"
        exit 1
      fi
      if [ ! -z "${{ parameters.id }}" ]; then
        if echo "${{ parameters.id }}" | grep -q '[^a-zA-Z0-9_]'; then
          echo "##[error] Parameter id has to consist of characters, numbers and _ only!"
          exit 1
        fi
      fi

      cat > "$PIPELINE_WORKSPACE/config${{ parameters.id }}.md" <<EOF
      # pipeline configuration

          HELM_VERSION:                   $HELM_VERSION
          IOM_HELM_VERSION:               $IOM_HELM_VERSION
          IOM_HELM_URL:                   $IOM_HELM_URL
          IOM_HELM_RELEASE:               $IOM_HELM_RELEASE
          IOM_KUBERNETES_NAMESPACE:       $IOM_KUBERNETES_NAMESPACE
          REPLICA_COUNT:                  $REPLICA_COUNT
          IMPORT_TESTDATA_TIMEOUT:        $IMPORT_TESTDATA_TIMEOUT
          
      # parameters

          id:                             ${{ parameters.id }}
          projectDir:                     ${{ parameters.projectDir }}
          dockerRepoIOMServiceConnection: ${{ parameters.dockerRepoIOMServiceConnection }}
          dockerRepoIOM:                  ${{ parameters.dockerRepoIOM }}
          acrServiceConnection:           ${{ parameters.acrServiceConnection }}
          acr:                            ${{ parameters.acr }}
          artifactsFeed:                  ${{ parameters.artifactsFeed }}
          uniqueSnapshotTag:              ${{ parameters.uniqueSnapshotTag }}
      EOF
    timeoutInMinutes: 1
    displayName: "Check parameters"
    #enabled: false

  - ${{ if not(eq(parameters.preHookTemplate, '')) }}:
    - template: ${{ parameters.preHookTemplate }}

  - checkout: ${{ parameters.repository }}
    path: $(PROJECT_PATH)
    clean: true
    timeoutInMinutes: 5
    displayName: "Checkout IOM project @$(Build.SourceBranchName)"
    #enabled: false

  - script: |
      set -e

      # Determine IOM version, requested by IOM project.
      IOM_VERSION=$(mvn help:evaluate -Dexpression=platform.version -q -DforceStdout | tail -1)
      if [ ! -z "$IOM_VERSION" ] && echo "$IOM_VERSION" | grep -q '^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$'; then
        echo "##vso[task.setvariable variable=IOM_VERSION;]$IOM_VERSION"
        IOM_MINOR_VERSION=$(echo "$IOM_VERSION" | sed 's|\.[^.]*$||g')
        echo "##vso[task.setvariable variable=IOM_MINOR_VERSION;]$IOM_MINOR_VERSION"
      else
        echo "##[error] Unable to determine IOM version, found: '$IOM_VERSION'"
        exit 1
      fi

      # Determine Project version.
      PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | tail -1)
      if [ ! -z "$PROJECT_VERSION" ]; then
        echo "##vso[task.setvariable variable=PROJECT_VERSION;]$PROJECT_VERSION"
      else
        echo "##[error] unable to determine project version."
        exit 1
      fi

      # Determine JDK version
      # TODO: xml_grep is not able to understand the expression /plugin[artifactId="maven-compiler-plugin"],
      # which would be required to select the jdk version really the right way.
      JDK_MAJOR_VERSION=$(xml_grep --text_only //plugins/plugin/configuration/release pom.xml)
      echo "##vso[task.setvariable variable=JDK_MAJOR_VERSION;]$JDK_MAJOR_VERSION"

      # Determine release related information
      if echo "$BUILD_SOURCEBRANCH" | grep -q '${{ parameters.branchesForPublication }}'; then
        echo '##vso[task.setvariable variable=IS_PRIVATE_BRANCH;]false'
      else
        echo '##vso[task.setvariable variable=IS_PRIVATE_BRANCH;]true'
      fi

      if echo "$PROJECT_VERSION" | grep -qi 'snapshot$'; then
        IS_RELEASE_BUILD=false
      else
        IS_RELEASE_BUILD=true
      fi
      echo "##vso[task.setvariable variable=IS_RELEASE_BUILD;]$IS_RELEASE_BUILD"

      # Determine current commit
      PROJECT_COMMIT="$(git log -1 | head -n 1 | ( read IGNORE COMMIT IGNORE; echo $COMMIT ) | cut -c 1-10)"
      echo "##vso[task.setvariable variable=PROJECT_COMMIT;]$PROJECT_COMMIT"
      
      cat >> "$PIPELINE_WORKSPACE/config${{ parameters.id }}.md" <<EOF

      # project information
    
          IOM_VERSION:                    $IOM_VERSION
          IOM_MINOR_VERSION:              $IOM_MINOR_VERSION
          PROJECT_VERSION:                $PROJECT_VERSION
          PROJECT_COMMIT:                 $PROJECT_COMMIT

      # build environment
        
          JDK_MAJOR_VERSION:              $JDK_MAJOR_VERSION

      # release information
    
          IS_PRIVATE_BRANCH:              $IS_PRIVATE_BRANCH
          IS_RELEASE_BUILD:               $IS_RELEASE_BUILD
      EOF
    timeoutInMinutes: 1
    workingDirectory: $(Pipeline.Workspace)/$(PROJECT_PATH)/${{ parameters.projectDir }}
    displayName: "Get project properties"
    #enabled: false

  - task: Cache@2
    inputs:
      key: 'minikube | "$(IOM_VERSION)" | "$(PROJECT_VERSION)"'
      path: "$(MINIKUBE_HOME)"
      cacheHitVar: MINIKUBE_CACHE_HIT
    timeoutInMinutes: 5
    displayName: "Create/restore minikube data"
    #enabled: false
  
  - task: Cache@2
    inputs:
      key: 'mvn repo cache | "$(IOM_VERSION)" | "$(PROJECT_VERSION)"'
      path: "$(Pipeline.Workspace)/$(M2_LOCAL_REPO)"
      cacheHitVar: M2_REPO_CACHE_HIT
    timeoutInMinutes: 5
    displayName: "Create/restore local maven cache"
    #enabled: false

  - task: JavaToolInstaller@0
    inputs:
      versionSpec: '$(JDK_MAJOR_VERSION)'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'

  - task: HelmInstaller@1
    inputs: 
      helmVersionToInstall: $(HELM_VERSION)
    timeoutInMinutes: 3
    displayName: "Install Helm"
    #enabled: false

  - task: MavenAuthenticate@0
    inputs:
      artifactsFeeds: ${{ parameters.artifactsFeed }}
    timeoutInMinutes: 1
    displayName: "Maven authenticate"
    #enabled: false

    ##############################################################################
    # Create Docker image.
    ##############################################################################

  - task: Docker@2
    inputs:
      command: login
      containerRegistry: ${{ parameters.dockerRepoIOMServiceConnection }}
    timeoutInMinutes: 1
    displayName: Login into IOM docker repo
    #enabled: false

  - script: |
      set -e
      
      # Start minikube
      docker version --format {{.Server.Os}}-{{.Server.Version}}
      # hardcoded cpu/memory requirements for now
      minikube start --vm-driver=docker --cpus=max --memory=8000m
    displayName: "Start minikube"
    timeoutInMinutes: 5
    #enabled: false
    
  - script: |
      set -e

      # Set image suffix for unique snapshot tags
      # uniqueSnapshotTag is of type boolean. The according values are mapped to strings 'True' and 'False'.
      if [ "$IS_RELEASE_BUILD" = 'false' -a "${{ parameters.uniqueSnapshotTag }}" = 'True' ]; then
        IMAGE_VERSION_SUFFIX="-$PROJECT_COMMIT"
      fi
    
      eval $(minikube -p minikube docker-env)
      mvn clean package -Pdocker \
        -Dubuntu.mirror.x64=$UBUNTU_MIRROR \
        -Dimage.version.suffix=$IMAGE_VERSION_SUFFIX \
        -Dintershop.docker.repo=${{ parameters.dockerRepoIOM }} \
        -Dimage.docker.opts='--docker-opts="--no-cache" --get-image-name="'$PIPELINE_WORKSPACE/project-image-name.txt'" --get-image-tag="'$PIPELINE_WORKSPACE/project-image-tag.txt'"'
    timeoutInMinutes: 30
    displayName: "Create project image"
    workingDirectory: "$(Pipeline.Workspace)/$(PROJECT_PATH)/${{ parameters.projectDir }}"
    #enabled: false

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
      testResultsFiles: '**/TEST-*.xml'
      searchFolder: '$(Pipeline.Workspace)/$(PROJECT_PATH)/${{ parameters.projectDir }}'
      testRunTitle: junit-tests
      mergeTestResults: true 
      failTaskOnFailedTests: true
      publishRunAttachments: true
    continueOnError: true
    timeoutInMinutes: 1
    condition: always()
    displayName: Publish junit test results
    #enabled: false

    ##############################################################################
    # Install Project in Minikube.
    ##############################################################################

  - script: |
      set -e

      eval $(minikube -p minikube docker-env)
      docker pull ${{ parameters.dockerRepoIOM }}/$DBACCOUNT_IMAGE_NAME:$DBACCOUNT_IMAGE_TAG
      docker tag ${{ parameters.dockerRepoIOM }}/$DBACCOUNT_IMAGE_NAME:$DBACCOUNT_IMAGE_TAG $DBACCOUNT_IMAGE_NAME:$DBACCOUNT_IMAGE_TAG
      
    displayName: "Provide dbaccount locally"
    timeoutInMinutes: 5
    #enabled: false
  
  - script: |
      set -e
            
      # Create values file.
      cat > values.yaml <<EOF
      replicaCount: $REPLICA_COUNT
      image:
        repository: $(cat $PIPELINE_WORKSPACE/project-image-name.txt)
        tag: $(cat $PIPELINE_WORKSPACE/project-image-tag.txt)
      dbaccount:
        enabled: true
        image:
          repository: $DBACCOUNT_IMAGE_NAME
          tag: $DBACCOUNT_IMAGE_TAG
      project:
        envName: ${{ parameters.projectEnvName }}
        importTestData: true
        importTestDataTimeout: $IMPORT_TESTDATA_TIMEOUT
      persistence:
        provisioning: local
        local:
          hostPath: /mnt/share
      podAntiAffinity:
        enabled: false
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/ssl-redirect: "false"
        hosts:
          - host:
            paths:
              - path: /
                pathType: Prefix
      postgres:
        enabled: true
        persistence:
          enabled: false
        service:
          type: LoadBalancer
        resources:
          limits:
            cpu: 2000m
            memory: 3000Mi
          requests:
            cpu: 1000m
            memory: 1000Mi
      mailpit:
        enabled: true
        ingress:
          enabled: false
      EOF

      # Convert values file into markdown format.
      echo '# Helm values' > "$PIPELINE_WORKSPACE/values${{ parameters.id }}.md"
      cat values.yaml | sed 's/\(.*\)/    \1/g' >> "$PIPELINE_WORKSPACE/values${{ parameters.id }}.md"
      echo "##vso[task.uploadsummary]$PIPELINE_WORKSPACE/values${{ parameters.id }}.md"

      # Start tunnel in background.
      # See https://minikube.sigs.k8s.io/docs/handbook/accessing/#loadbalancer-access
      minikube tunnel > /dev/null 2>&1 &

      # create log-directory
      mkdir $LOG_DIR

      kubectl create namespace nginx

      # Install NGINX Helm charts
      helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      helm repo update

      # Install NGINX
      helm install global ingress-nginx/ingress-nginx -n nginx --timeout 10m0s --wait \
        --set controller.service.type=LoadBalancer \
        --set controller.service.ports.http=8080 \
        --set controller.service.ports.https=8443 \
        --set rbac.scope=false \
        --set controller.scope.enabled=false

      kubectl get all -n nginx
    
      kubectl create namespace $IOM_KUBERNETES_NAMESPACE
      
      # Install IOM Helm charts
      helm repo add intershop $IOM_HELM_URL
      helm repo update
      
      # Install IOM project.
      helm install $IOM_HELM_RELEASE intershop/iom --version $IOM_HELM_VERSION -f values.yaml --namespace $IOM_KUBERNETES_NAMESPACE --timeout 20m0s --wait

      kubectl get all -n $IOM_KUBERNETES_NAMESPACE
      kubectl get ingress -n $IOM_KUBERNETES_NAMESPACE
    
      # Wait for import of test-data + 1 minute.
      # If import of test-data fails, the pod will be restarted.
      sleep $(expr $IMPORT_TESTDATA_TIMEOUT + 60)
    timeoutInMinutes: 30
    workingDirectory: $(Pipeline.Workspace)
    displayName: "Install IOM in minikube"
    #enabled: false

  - script: |
      set -e

      # get IP of ingress
      INGRESS_IP=$(kubectl get service global-ingress-nginx-controller -n nginx -o jsonpath={.status.loadBalancer.ingress[0].ip})
      if echo "$INGRESS_IP" |  grep -qE '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'; then
        echo "##vso[task.setvariable variable=INGRESS_IP;]$INGRESS_IP"
      else
        echo "##[error] no ingress IP available!"
        exit 1
      fi

      # get IP of postgres
      POSTGRES_IP=$(kubectl get service $IOM_HELM_RELEASE-postgres -n $IOM_KUBERNETES_NAMESPACE -o jsonpath={.status.loadBalancer.ingress[0].ip})
      if echo "$POSTGRES_IP" |  grep -qE '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'; then
        echo "##vso[task.setvariable variable=POSTGRES_IP;]$POSTGRES_IP"
      else
        echo "##[error] no postgres IP available!"
        exit 1
      fi

      cat >> "$PIPELINE_WORKSPACE/config${{ parameters.id }}.md" << EOF

      # kubernetes environment

          INGRESS_IP:                     $INGRESS_IP
          POSTGRES_IP:                    $POSTGRES_IP
      EOF
    timeoutInMinutes: 5
    displayName: Get external IPs
    #enabled: false

  - script: |
      set -e
      echo "##vso[task.uploadsummary]$PIPELINE_WORKSPACE/config${{ parameters.id }}.md"
    timeoutInMinutes: 1
    condition: always()
    continueOnError: true
    displayName: "Provide pipeline configuration"
    #enabled: false

  - script: |
      set -e

      # create test-framework configuration
      cat > testframework-config.user.yaml <<EOF
      testframework:
        default-endpoint:
          version: "V1"
          endpoint:
            host: "$INGRESS_IP"
            port: 8080
            protocol: "http"
        database:
          default:
            version: "V1"
            endpoint:
              host: "$POSTGRES_IP:5432"
            username: "oms_user"
            password: "OmsDB"
            parameters:
              dbName: "oms_db"
      EOF

      # Provide testframework config files in markdown format
      cat > "$PIPELINE_WORKSPACE/testconfig${{ parameters.id }}.md" <<EOF
      # testframework-config.yaml

      $(cat testframework-config.yaml | sed 's/\(.*\)/    \1/g')
      
      # testframework-config.user.yaml
      
      $(cat testframework-config.user.yaml | sed 's/\(.*\)/    \1/g')
      EOF
      echo "##vso[task.uploadsummary]$PIPELINE_WORKSPACE/testconfig${{ parameters.id }}.md"

      mvn verify | tee "$PIPELINE_WORKSPACE/$LOG_DIR/surefire-output.txt"
    workingDirectory: $(Pipeline.Workspace)/$(PROJECT_PATH)/${{ parameters.projectDir }}
    timeoutInMinutes: 60
    displayName: Excute tests
    #enabled: false
  
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
      testResultsFiles: '**/failsafe-reports/TEST-*.xml'
      searchFolder: '$(Pipeline.Workspace)/$(PROJECT_PATH)/${{ parameters.projectDir }}'
      testRunTitle: integration-tests
      mergeTestResults: true 
      failTaskOnFailedTests: true
      publishRunAttachments: true
    continueOnError: true
    timeoutInMinutes: 1
    condition: always()
    displayName: Publish integration test results
    #enabled: false

  - script: |
      # Don't stop on error
      set +e
      
      kubectl get all -n $IOM_KUBERNETES_NAMESPACE > get-all.txt
      kubectl logs $IOM_HELM_RELEASE-iom-0 -n $IOM_KUBERNETES_NAMESPACE -c dbaccount > dbaccount-logs.txt
      I=0
      while [ "$I" -lt "$REPLICA_COUNT" ]; do
        kubectl describe pod $IOM_HELM_RELEASE-iom-$I -n $IOM_KUBERNETES_NAMESPACE > describe-IOM-$I.txt
        kubectl logs $IOM_HELM_RELEASE-iom-$I -n $IOM_KUBERNETES_NAMESPACE -c iom > iom-$I-logs.txt
        I=$(expr $I + 1)
      done
      tar -cvzf logs.tgz *
      rm *.txt

      kubectl get all -n $IOM_KUBERNETES_NAMESPACE
      kubectl describe pod ci-iom-1 -n $IOM_KUBERNETES_NAMESPACE
      
    # Don't stop on error to get as much information as possible.
    continueOnError: true
    timeoutInMinutes: 5
    condition: always()
    workingDirectory: "$(Pipeline.Workspace)/$(LOG_DIR)"
    displayName: "Collect data of IOM"
    #enabled: false

  - publish: "$(Pipeline.Workspace)/$(LOG_DIR)"
    artifact: iom-logs${{ parameters.id }}
    # Don't stop on error to get as much information as possible.   
    continueOnError: true
    timeoutInMinutes: 2
    displayName: "Publish IOM data"
    condition: always()
    #enabled: false

  - script: |
      set -e

      cat > "$PIPELINE_WORKSPACE/kubernetes${{ parameters.id }}.md" <<EOF
      # Kubernetes status of namespace $IOM_KUBERNETES_NAMESPACE
      Helm release is **${IOM_HELM_RELEASE}**.
      
      EOF
      kubectl get all -n $IOM_KUBERNETES_NAMESPACE | sed 's/\(.*\)/    \1/g' >> "$PIPELINE_WORKSPACE/kubernetes${{ parameters.id }}.md"
      echo "##vso[task.uploadsummary]$PIPELINE_WORKSPACE/kubernetes${{ parameters.id }}.md"

    # Don't stop on error to get as much information as possible.
    continueOnError: true
    timeoutInMinutes: 2
    displayName: "Provide status of IOM"
    condition: always()
    #enabled: false

  - script: |
      set -e

      # Check restart-count of all pods of Helm release $IOM_HELM_RELEASE in namespace $IOM_KUBERNETES_NAMESPACE.
      kubectl get pods -n $IOM_KUBERNETES_NAMESPACE -lapp.kubernetes.io/instance=$IOM_HELM_RELEASE -o jsonpath={..restartCount} |
        tr ' ' '\n' | while read RESTART_COUNT; do
        if [ "$RESTART_COUNT" != '0' ]; then
          echo "##[error] restart detected"
          exit 1
        fi
      done
    timeoutInMinutes: 2
    displayName: "Check restart of pods"
    #enabled: false

    ##############################################################################
    # Provide images.
    ##############################################################################

    # Set IS_RELEASE_BUILD=(true|false)
    # Set IS_PRIVATE_BRANCH=(true|false)
    # Both variables are used to control process of image publication:
    #  - Images from private branches are not published at all, applying the according naming rules.
    #  - Images from public branches will be published, applying the according naming rules.

  - task: Docker@2
    inputs:
      command: login
      containerRegistry: ${{ parameters.acrServiceConnection }}
    timeoutInMinutes: 1
    condition: and(succeeded(), eq(variables.IS_PRIVATE_BRANCH, 'false'))
    displayName: Login into project ACR
    #enabled: false
    
  - script: |
      set -e

      eval $(minikube -p minikube docker-env)
      PROVIDED_IMAGE=${{ parameters.acr }}/$(cat $PIPELINE_WORKSPACE/project-image-name.txt):$(cat $PIPELINE_WORKSPACE/project-image-tag.txt)
      docker tag "$(cat $PIPELINE_WORKSPACE/project-image-name.txt):$(cat $PIPELINE_WORKSPACE/project-image-tag.txt)" $PROVIDED_IMAGE
      docker push $PROVIDED_IMAGE

      cat > $PIPELINE_WORKSPACE/docker-image${{ parameters.id }}.md <<EOF
      # Provided Docker image
          $PROVIDED_IMAGE
      EOF
      echo "##vso[task.uploadsummary]$PIPELINE_WORKSPACE/docker-image${{ parameters.id }}.md"

    timeoutInMinutes: 5
    condition: and(succeeded(), eq(variables.IS_PRIVATE_BRANCH, 'false'))
    displayName: "Publish project image"
    #enabled: false

  # Generate a build information file and push it as a pipeline artifact.
  - script: |
      set -e

      cat <<EOF > $PIPELINE_WORKSPACE/imageProperties.yaml
      images:
        - type: iom
          tag: $(cat $PIPELINE_WORKSPACE/project-image-tag.txt)
          name: $(cat $PIPELINE_WORKSPACE/project-image-name.txt)
          registry: ${{ parameters.acr }}
      EOF
      echo "##vso[artifact.upload containerfolder=image;artifactname=image_artifacts${{ parameters.id }}]$PIPELINE_WORKSPACE/imageProperties.yaml"

    timeoutInMinutes: 5
    displayName: "Create image overview"
    #enabled: false

  - ${{ if not(eq(parameters.postHookTemplate, '')) }}:
    - template: ${{ parameters.postHookTemplate }}
  
    ##############################################################################
    # Cleanup
    ##############################################################################

  - script: |
      minikube delete --all
    timeoutInMinutes: 5
    displayName: Cleanup Minikube
    condition: always()
